# `ckup = require \ckup` in CommonJS, `self.Ckup` in browser etc.
ckup = exports ? @Ckup = {}
ckup import
  VERSION: \0.1.2

  COMMA: /\s*,\s*/


  # `.call`s a `template` function with a `ckup` clone set to `this` value,
  # returning the rendered HTML string.
  render: (template) ->
    unless typeof template is \function
      # If `template` isn't a function, compile it using `Coco` global
      # with `with` with `this` to enable `@`-less style.
      template = Function 'with(this)' +
        (Coco ? require \coco)compile "#{template}"
    # `@_` holds the HTML being built.
    template.call me = @{_: ''}
    me._

  # Renders an object as CSS rules a la <https://github.com/aeosynth/ccss>.
  css: (rules) ->
    code = ''
    rules.=call this if typeof rules is \function
    for selector, children in rules
      children.=call this if typeof children is \function
      children <<<< kv for kv of []concat that if delete children.mixin
      subrules = declarations = selectors = ''
      for key, val in children
        switch typeof val
        case <[ string number ]>
          declarations += "  #{ @decamelize key }: #{val};\n"
        default
          ss = []; selectors ||= selector.split @COMMA
          ss.push "#{s} #{k}" for s of selectors for k of key.split @COMMA
          (subrules ||= {})[ss.join ', '] = val
      declarations and code += "#{selector} {\n#{declarations}}\n"
      subrules     and code += @css subrules
    code

  # Turns a string HTML-safe.
  quote: do (
    re = /[&<>\"\']/g
    fn = ->
      switch it
      case \& then '&amp;'
      case \< then '&lt;'
      case \> then '&gt;'
      case \" then '&#34;'
      case \' then '&#39;'
  ) -> -> "#{it}"replace re, fn

  decamelize: do (
    re = /[A-Z]/g
    fn = -> \- + it.toLowerCase()
  ) -> -> "#{it}"replace re, fn

  # Appends a DTD declaration.
  doctype : -> @_ += "<!DOCTYPE #{it}>"; void
  # Appends a text as is.
  htm     : -> @_ += it; void
  # Appends a text node.
  text    : -> @_ += @quote it; void
  # Appends an HTML entity.
  entity  : -> @_ += "&#{ if typeof it is \number then \# + it else it };"; void

  # Builds an HTML element.
  #
  # - `args`: A list of element content, which can be either of
  #   - an object containing key-value pairs of attributes
  #   - a function which will be called recursively
  #   - any existent value
  # - `tailless`: Indicates end tag omission.
  element: (name, args, tailless) ->
    code = \< + name; bodies = []
    for arg of args
      if typeof arg is \object
      then code += " #{key}=\"#{ @quote val }\"" for key, val in arg
      else bodies.push arg
    if tailless then @_ += code + \/>; return
    @_ += code + \\n>
    for body of bodies
      body.=call this if typeof body is \function
      @_ += body if body?
    @_ += "</#{name}>"
    void

  # Shortcut to `@a {href: url}, txt`.
  A: (url, txt) ->
    args = [...@@]
    args.0 = href: url
    args.1 = url unless txt
    @element \a args
    void

# Each tag-named method delegates to `@element`.
for tag of <[
  a abbr acronym address applet area article aside audio
  b base basefont bdo big blockquote body br button
  canvas caption center cite code col colgroup command
  datalist dd del details dfn dir div dl dt
  em embed fieldset figcaption figure font footer form frame frameset
  h1 h2 h3 h4 h5 h6 head header hgroup hr html
  i iframe img input ins keygen kbd label legend li link
  map mark menu meta meter nav noframes noscript
  object ol optgroup option output p param pre progress q rp rt ruby
  s samp script section select small source span strike strong style sub
  summary sup table tbody td textarea tfoot th thead time title tr tt
  u ul video xmp
]> then do ->
  tailless = tag of <[ area base basefont br hr img input link meta ]>
  # `@a href: url, ->` -> `@element \a, [href: url, ->]`
  ckup[tag] = -> @element tag, @@, tailless; void

## Aliases
ckup{quote: $, htm: H, text: T, entity: E} = ckup
