# `ckup = require \ckup` in CommonJS, `self.Ckup` in browser etc.
ckup = exports ? @Ckup = {}
ckup import
  VERSION: \0.1.7b

  # `.call`s a `template` function with a `ckup` clone set to `this` value,
  # returning the rendered HTML string.
  render: (template) ->
    unless typeof template is \function
      # If `template` isn't a function, compile it using `Coco` global
      # with `with` with `this` to enable `@`-less style.
      template = Function \
        'with(this)' + (Coco ? require \coco)compile "#template"
    template.call me = ^this
    me._

  # Compiles a string template to a template function, which, when called with
  # `context`, executes with `context` bound to `this`; otherwise `ckup` is
  # bound to `this` to remain backwards-compatibile.
  compile: (template) ->
    template = Function 'ckup' \
      'with(ckup)' + (Coco ? require \coco)compile "#template"
    (context) ~>
      me = ^this
      template.call context ? me, me
      me._

  # `@_` holds the code being built.
  _: ''

  # Renders an object as CSS rules a la <https://github.com/aeosynth/ccss>.
  css: (rules) ->
    code = ''
    rules.=call this if typeof rules is \function
    for selector, children in rules
      children.=call this if typeof children is \function
      children <<<< kv for kv of []concat that if delete children.mixin
      subrules = declarations = selectors = ''
      for key, val in children
        switch typeof val
        case \string \number
          # _$_-prefixed properties are expanded as vendor-prefixed.
          if (key = @decamelize key)charAt() is \$
            key.=slice 1
            declarations += "  -#v-#key: #val;\n" for v of @VENDORS
          declarations += "  #key: #val;\n"
        default
          ss = []; selectors ||= selector.split @COMMA
          ss.push "#s #k" for s of selectors for k of key.split @COMMA
          (subrules ||= {})[ss.join ', '] = val
      declarations and code += "#selector {\n#declarations}\n"
      subrules     and code += @css subrules
    code

  COMMA   : /\s*,\s*/
  VENDORS : <[ webkit moz ms o ]>

  # Turns a string HTML-safe.
  quote: let re = /[&<>\"\']/g
    function fn
      switch it
      case \& then '&amp;'
      case \< then '&lt;'
      case \> then '&gt;'
      case \" then '&#34;'
      case \' then '&#39;'
    -> "#it"replace re, fn

  decamelize: let re = /[A-Z]/g
    function fn then \- + it.toLowerCase()
    -> "#it"replace re, fn

  # Appends a DTD declaration.
  doctype : -> @_ += "<!DOCTYPE #it>"; void
  # Appends a text as is.
  raw     : -> @_ += it; void
  # Appends a text node.
  text    : -> @_ += @quote it; void
  # Appends an HTML entity.
  entity  : -> @_ += "&#{ if typeof it is \number then \# + it else it };"; void

  # Builds an HTML element.
  #
  # - `args`: A list of element content, which can be either of
  #   - an object containing key-value pairs of attributes
  #   - a function which will be called recursively
  #   - any existent value
  # - `tailless`: Indicates end tag omission.
  element: (name, args, tailless) ->
    code = \< + name; bodies = []
    for arg of args
      if typeof arg is \object
        code += " #key=\"#{ @quote val }\"" for key, val in arg
      else bodies.push arg
    if tailless
      @_ += "#code/>"
      return
    @_ += "#code\n>"
    for body of bodies
      body.=call this if typeof body is \function
      @_ += body if body?
    @_ += "</#name>"
    void

  # Shortcut to `@a {href: url}, txt`.
  A: (url, txt) ->
    @element \a [...@@] <<< [href: url, txt or @quote url]; void

# Each tag-named method delegates to `@element`.
# ref. <http://dev.w3.org/html5/spec/Overview.html>
for tag of <[
  a abbr address area article aside audio
  b base bdi bdo blockquote body br button
  canvas caption cite code col colgroup command
  datalist dd del details dfn div dl dt em embed
  fieldset figcaption figure footer form
  h1 h2 h3 h4 h5 h6 head header hgroup hr html i iframe img input ins
  kbd keygen label legend li link map mark menu meta meter nav noscript
  object ol optgroup option output p param pre progress q rp rt ruby
  s samp script section select small source span strong style sub summary sup
  table tbody td textarea tfoot th thead time title tr track
  u ul var video wbr
]> then let tailless = tag of <[ # void elements
    area base br col command embed hr img input
    keygen link meta param source track wbr ]>
  # `@a href: url, ->` -> `@element \a, [href: url, ->]`
  ckup[tag] = -> @element tag, @@, tailless; void

## Aliases
ckup{quote: $, raw: R, text: T, entity: E, var: v} = ckup
